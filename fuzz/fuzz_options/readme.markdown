# Fuzz Options

This is a simple project helping you to fuzz command options.

## 1. Quick Start

### 1.1 Compile john

```shell
$ cd $JOHN_PATH/src
$ export ASAN_OPTIONS='abort_on_error=1'
$ AFL_USE_ASAN=1 AFL_HARDEN=1 ./configure CC=gcc-4.9 --enable-asan && make -sj8
```

### 1.2 Compile Fuzz Options

```shell
$ cd $JOHN_PATH/fuzz/fuzz_options/sample
$ gcc-4.9 ../src/combination.c ../src/fuzz_options.c -o fuzz_options
```

### 1.3 Fuzzing

```shell
$ ./fuzz_options

Usage: ./fuzz_options  /path/to/app  /path/to/parameter_config_file [parameters-always-run]

$ ./fuzz_options  ../../../run/john  parameter_config_file  --max-run-time=1
```

The last parameters can have one to seven parameters which will always sent to target app.
In order to run fast, it would be better to add "--max-run-time=1". The command options which 
leads to crash will be written to **./crashes**

## 2. Parameter Config File

The parameter config file likes the john.conf. The file contains parameter names and 
values. Each parameter can have one or more values. You should write every parameter 
that you want test to this file.

```shell
[parameter-name]
value_1
value_2
value_3
...
```

## 3. Mechanism

### 3.1 Mechanism of Fuzz Options

The explaination maybe hard to understand, you can read the next section: 3.2 which is 
easy to understand.

The mechanism is very simple, just try every combination of command options. Fuzz 
Options will try to run the target app with the combination of parameters. 

The number of all parameters is N. Firstly, it will run the target app with none 
parameters. And then it will run the target app with one, two, three, ..., m ..., 
N parameters. For m parameters, Fuzz Options will brute-force all the combinations 
of m parameters. p stands for parameter, p[1] stands for the first parameter, and 
p[N] is the last parameters. There are C(N, m) iterations for m parameters combination:

```C
p[1]      p[2]      p[3]      ...   p[m]   
p[2]      p[3]      p[4]      ...   p[m+1]   
...       ...       ...       ...   ...
p[i]      p[i+1]    p[i+2]    ...   p[i+m-1]
...       ...       ...       ...   ...
p[N-m+1]  p[N-m+2]  p[N-m+3]  ...   p[N]
```

The number of values for p[i] is p[i].size; For iteration: p[i] to p[i+m-1], there 
will be p[i].size * p[i+1].size*...*p[i+m-1].size cases. Such as below:

```C
p[i][1]          p[i+1][1]            p[i+2][1]            ...  p[i+m-2][1]              p[i+m-1][1]
p[i][1]          p[i+1][1]            p[i+2][1]            ...  p[i+m-2][1]              p[i+m-1][2]
p[i][1]          p[i+1][1]            p[i+2][1]            ...  p[i+m-2][1]              p[i+m-1][3]
...              ...                  ...                  ...  ...                      ...
p[i][1]          p[i+1][1]            p[i+2][1]            ...  p[i+m-2][1]              p[i+m-1][p[i+m-1].size]

p[i][1]          p[i+1][1]            p[i+2][1]            ...  p[i+m-2][2]              p[i+m-1][1]
p[i][1]          p[i+1][1]            p[i+2][1]            ...  p[i+m-2][2]              p[i+m-1][2]
p[i][1]          p[i+1][1]            p[i+2][1]            ...  p[i+m-2][2]              p[i+m-1][3]
...              ...                  ...                  ...  ...                      ...
p[i][1]          p[i+1][1]            p[i+2][1]            ...  p[i+m-2][2]              p[i+m-1][p[i+m-1].size]
...              ...                  ...                  ...  ...                      ...
...              ...                  ...                  ...  ...                      ...
p[i][p[i].size]  p[i+1][p[i+1].size]  p[i+2][p[i+2].size]  ...  p[i+m-2][p[i+m-2].size]  p[i+m-1][p[i+m-1].size]
```

Note: The number of total cases will increase explosively with the increase of command 
options. When the number of the total cases is larger than millon, it's hard to finish 
the test in several days.

### 3.2 Example of Fuzz Options

For example, the content of parameter config file is below:

```shell
[]
7z_fmt

[--single=]
NONE
DROP
SINGLE
S1

[--wordlist=]
pwfile
password.lst
```

Below are the test cases generated by FuzzOptions:

```shell
#None parameters

$ /path/to/app

#One parameters

$ /path/to/app 7z_fmt

$ /path/to/app --single=NONE
$ /path/to/app --single=DROP
$ /path/to/app --single=SINGLE
$ /path/to/app --single=S1

$ /path/to/app --wordlist=pwfile
$ /path/to/app --wordlist=password.lst

#Two parameters

$ /path/to/app 7z_fmt --single=NONE
$ /path/to/app 7z_fmt --single=DROP
$ /path/to/app 7z_fmt --single=SINGLE
$ /path/to/app 7z_fmt --single=S1

$ /path/to/app 7z_fmt --wordlist=pwfile
$ /path/to/app 7z_fmt --wordlist=password.lst

$ /path/to/app --single=NONE --wordlist=pwfile
$ /path/to/app --single=NONE --wordlist=password.lst
$ /path/to/app --single=DROP --wordlist=pwfile
$ /path/to/app --single=DROP --wordlist=password.lst
$ /path/to/app --single=SINGLE --wordlist=pwfile
$ /path/to/app --single=SINGLE --wordlist=password.lst
$ /path/to/app --single=S1 --wordlist=pwfile
$ /path/to/app --single=S1 --wordlist=password.lst

#Three parameters

$ /path/to/app 7z_fmt --single=NONE --wordlist=pwfile
$ /path/to/app 7z_fmt --single=NONE --wordlist=password.lst
$ /path/to/app 7z_fmt --single=DROP --wordlist=pwfile
$ /path/to/app 7z_fmt --single=DROP --wordlist=password.lst
$ /path/to/app 7z_fmt --single=SINGLE --wordlist=pwfile
$ /path/to/app 7z_fmt --single=SINGLE --wordlist=password.lst
$ /path/to/app 7z_fmt --single=S1 --wordlist=pwfile
$ /path/to/app 7z_fmt --single=S1 --wordlist=password.lst
```

## 4. List of bugs found by Fuzz Options





